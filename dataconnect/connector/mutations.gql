mutation upsertUser($uid: String!, $name: String, $email: String)
@auth(expr: "auth.uid == uid") {
  user_upsert(
    data: {
      name: $name
      email: $email
      uid: $uid
      createdAt_expr: "request.time"
    }
  )
}

mutation upsertBook(
  $id: UUID!
  $title: String!
  $summary: String!
  $genre: [String!]!
  $authors: [String!]!
  $publishedDate: Timestamp!
  $content: String!
  $imageUrl: String!
) @auth(level: USER) {
  book_upsert(
    data: {
      id: $id
      title: $title
      summary: $summary
      imageUrl: $imageUrl
      genre: $genre
      authors: $authors
      publishedDate: $publishedDate
      content: $content
      contentEmbed_embed: { model: "text-embedding-005", text: $content }
    }
  )
}

mutation upsertReadHistory(
  $id: UUID
  $userUid: String!
  $bookId: UUID!
  $readDate: Timestamp!
  $rating: Int
  $review: String
) @auth(expr: "auth.uid == userUid") {
  readHistory_upsert(
    data: {
      id: $id
      userUid: $userUid
      bookId: $bookId
      readDate: $readDate
      rating: $rating
      review: $review
    }
  )
}

mutation deleteReadHistory($id: UUID!, $userUid: String!)
@auth(expr: "auth.uid == readHistory.userUid") {
  readHistory_delete(key: { id: $id, userUid: $userUid })
}
