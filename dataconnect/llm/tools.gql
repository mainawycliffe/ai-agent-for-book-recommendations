fragment BookDetails on Book {
  id
  title
  authors
  genre
  summary
  imageUrl
  publishedDate
  content
}

# A query to search for books using a vector search.
query searchForBooksWithQuery($query: String!) @auth(level: PUBLIC) {
  books_contentEmbed_similarity(
    compare_embed: { model: "text-embedding-005", text: $query }
  ) {
    ...BookDetails
  }
}

# A query to get a list of books that a user has read, along with their reading
# history.
query userReadHistory($uid: String!) @auth(level: PUBLIC) {
  readHistories(where: { userUid: { eq: $uid } }) {
    id
    book {
      ...BookDetails
    }
    readDate
    rating
    review
    user {
      uid
      name
      email
    }
  }
}

# A query to get recommendations for a user, including the book details and the
# reason for the recommendation -- useful for understanding why a book was recommended.
query userRecommendations($uid: String!) @auth(level: PUBLIC) {
  recommendations(where: { userUid: { eq: $uid } }) {
    id
    book {
      ...BookDetails
    }
    reason
    createdAt
  }
}

# A mutation to add a new book recommendation for a user.
mutation addBookRecommendation(
  $id: UUID
  $userUid: String!
  $bookId: UUID!
  $reason: String!
) @auth(level: PUBLIC) {
  recommendation_upsert(
    data: {
      id: $id
      userUid: $userUid
      bookId: $bookId
      reason: $reason
      createdAt_expr: "request.time"
    }
  )
}
