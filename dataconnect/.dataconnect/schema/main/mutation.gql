extend type Mutation {
  """
  ✨ Insert a single `Book` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  book_insert(
    """
    Data object to insert into the table.
    """
    data: Book_Data!
  ): Book_KeyOutput! @fdc_generated(from: "Book", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `ReadHistory` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  readHistory_insert(
    """
    Data object to insert into the table.
    """
    data: ReadHistory_Data!
  ): ReadHistory_KeyOutput! @fdc_generated(from: "ReadHistory", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Recommendation` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  recommendation_insert(
    """
    Data object to insert into the table.
    """
    data: Recommendation_Data!
  ): Recommendation_KeyOutput! @fdc_generated(from: "Recommendation", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Book` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  book_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Book_Data!]!
  ): [Book_KeyOutput!]! @fdc_generated(from: "Book", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `ReadHistory` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  readHistory_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [ReadHistory_Data!]!
  ): [ReadHistory_KeyOutput!]! @fdc_generated(from: "ReadHistory", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Recommendation` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  recommendation_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Recommendation_Data!]!
  ): [Recommendation_KeyOutput!]! @fdc_generated(from: "Recommendation", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Book` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Book`.
  """
  book_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Book_Data!
  ): Book_KeyOutput! @fdc_generated(from: "Book", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `ReadHistory` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `ReadHistory`.
  """
  readHistory_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: ReadHistory_Data!
  ): ReadHistory_KeyOutput! @fdc_generated(from: "ReadHistory", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Recommendation` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Recommendation`.
  """
  recommendation_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Recommendation_Data!
  ): Recommendation_KeyOutput! @fdc_generated(from: "Recommendation", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Book` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Book`.
  """
  book_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Book_Data!]!
  ): [Book_KeyOutput!]! @fdc_generated(from: "Book", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `ReadHistory` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `ReadHistory`.
  """
  readHistory_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [ReadHistory_Data!]!
  ): [ReadHistory_KeyOutput!]! @fdc_generated(from: "ReadHistory", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Recommendation` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Recommendation`.
  """
  recommendation_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Recommendation_Data!]!
  ): [Recommendation_KeyOutput!]! @fdc_generated(from: "Recommendation", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Book` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Book` or `null` if not found.
  """
  book_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Book_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Book_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Book_Data!
  ): Book_KeyOutput @fdc_generated(from: "Book", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `ReadHistory` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `ReadHistory` or `null` if not found.
  """
  readHistory_update(
    """
    The key used to identify the object.
    """
    key: ReadHistory_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ReadHistory_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: ReadHistory_Data!
  ): ReadHistory_KeyOutput @fdc_generated(from: "ReadHistory", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Recommendation` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Recommendation` or `null` if not found.
  """
  recommendation_update(
    """
    The key used to identify the object.
    """
    key: Recommendation_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Recommendation_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Recommendation_Data!
  ): Recommendation_KeyOutput @fdc_generated(from: "Recommendation", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Book` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  book_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Book_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Book_Data!
  ): Int! @fdc_generated(from: "Book", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `ReadHistory` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  readHistory_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: ReadHistory_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: ReadHistory_Data!
  ): Int! @fdc_generated(from: "ReadHistory", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Recommendation` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  recommendation_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Recommendation_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Recommendation_Data!
  ): Int! @fdc_generated(from: "Recommendation", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Book` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  book_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Book_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Book_FirstRow
  ): Book_KeyOutput @fdc_generated(from: "Book", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `ReadHistory` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  readHistory_delete(
    """
    The key used to identify the object.
    """
    key: ReadHistory_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ReadHistory_FirstRow
  ): ReadHistory_KeyOutput @fdc_generated(from: "ReadHistory", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Recommendation` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  recommendation_delete(
    """
    The key used to identify the object.
    """
    key: Recommendation_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Recommendation_FirstRow
  ): Recommendation_KeyOutput @fdc_generated(from: "Recommendation", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Book` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  book_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Book_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Book", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `ReadHistory` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  readHistory_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: ReadHistory_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "ReadHistory", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Recommendation` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  recommendation_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Recommendation_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Recommendation", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
